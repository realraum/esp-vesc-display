name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'

env:
  FIRMWARE_BASE: repository # use something like repository/firmware in case this is a repo with other things like hardware

jobs:
  checkout:
    runs-on: ubuntu-latest
    name: Checkout
    steps:
      - name: Cache repository
        uses: actions/cache@v4
        id: cache-repository
        with:
          path: repository
          key: ${{ runner.os }}-repository-${{ github.sha }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: repository
          submodules: recursive

  install-idf:
    runs-on: ubuntu-latest
    name: Install esp-idf
    needs:
      - checkout
    steps:
      - name: Cache repository
        uses: actions/cache@v4
        id: cache-repository
        with:
          path: repository
          key: ${{ runner.os }}-repository-${{ github.sha }}

      - name: Verify that "Cache repostory" had a hit
        if: ${{ steps.cache-repository.outputs.cache-hit != 'true' }}
        run: exit 1

      - name: Get esp-idf release name
        id: get-esp-idf-release
        run: echo "tag_name=$(git -C $FIRMWARE_BASE/esp-idf describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Cache .espressif
        id: cache-espressif
        uses: actions/cache@v4
        with:
          path: ~/.espressif
          key: ${{ runner.os }}-espressif-${{ steps.get-esp-idf-release.outputs.tag_name }}

      - name: Install .espressif dependencies
        if: ${{ steps.cache-espressif.outputs.cache-hit != 'true' }}
        run: $FIRMWARE_BASE/esp-idf/install.sh

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [default, diodes]
    name: ${{ matrix.node }}
    needs:
      - checkout
      - install-idf
    steps:
      - name: Cache repository
        uses: actions/cache@v4
        id: cache-repository
        with:
          path: repository
          key: ${{ runner.os }}-repository-${{ github.sha }}

      - name: Verify that "Cache repostory" had a hit
        if: ${{ steps.cache-repository.outputs.cache-hit != 'true' }}
        run: exit 1

      - name: Get esp-idf release name
        id: get-esp-idf-release
        run: echo "tag_name=$(git -C $FIRMWARE_BASE/esp-idf describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Cache .espressif
        id: cache-espressif
        uses: actions/cache@v4
        with:
          path: ~/.espressif
          key: ${{ runner.os }}-espressif-${{ steps.get-esp-idf-release.outputs.tag_name }}

      - name: Verify that "Cache .espressif" had a hit
        if: ${{ steps.cache-espressif.outputs.cache-hit != 'true' }}
        run: |
          echo "Cache .espressif did not hit? Did the prepare step run successfully?"
          exit 1

      - name: Build firmware
        run: |
          cd $FIRMWARE_BASE
          ./esp-idf/install.sh
          . export.sh
          ./switchconf.sh ${{ matrix.node }}
          idf.py build

      - name: Upload firmware
        uses: actions/upload-artifact@v2
        with:
          name: firmware-${{ matrix.node }}
          path: $FIRMWARE_BASE/build/*.bin

  create-release:
    runs-on: ubuntu-latest
    name: Create release
    needs:
      - build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download firmware binaries
        uses: actions/download-artifact@v2
        with:
          name: firmware-*
          path: ${{ github.workspace }}/firmware

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Firmware binaries for ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload firmware binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/firmware/*.bin
          asset_name: ${{ github.ref }}.bin
          asset_content_type: application/octet-stream
